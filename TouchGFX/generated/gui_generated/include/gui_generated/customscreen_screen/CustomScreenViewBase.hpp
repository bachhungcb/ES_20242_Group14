/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef CUSTOMSCREENVIEWBASE_HPP
#define CUSTOMSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/customscreen_screen/CustomScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>

class CustomScreenViewBase : public touchgfx::View<CustomScreenPresenter>
{
public:
    CustomScreenViewBase();
    virtual ~CustomScreenViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void deletePatern()
    {
        // Override and implement this function in CustomScreen
    }
    virtual void confirmNewPattern()
    {
        // Override and implement this function in CustomScreen
    }
    virtual void dot1Selected()
    {
        // Override and implement this function in CustomScreen
    }
    virtual void dot2Selected()
    {
        // Override and implement this function in CustomScreen
    }
    virtual void dot3Selected()
    {
        // Override and implement this function in CustomScreen
    }
    virtual void dot4Selected()
    {
        // Override and implement this function in CustomScreen
    }
    virtual void dot5Selected()
    {
        // Override and implement this function in CustomScreen
    }
    virtual void dot6Selected()
    {
        // Override and implement this function in CustomScreen
    }
    virtual void dot7Selected()
    {
        // Override and implement this function in CustomScreen
    }
    virtual void dot8Selected()
    {
        // Override and implement this function in CustomScreen
    }
    virtual void dot9Selected()
    {
        // Override and implement this function in CustomScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image1;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::TouchButtonTrigger >  >  dot9;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::TouchButtonTrigger >  >  dot8;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::TouchButtonTrigger >  >  dot7;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::TouchButtonTrigger >  >  dot6;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::TouchButtonTrigger >  >  dot5;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::TouchButtonTrigger >  >  dot4;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::TouchButtonTrigger >  >  dot3;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::TouchButtonTrigger >  >  dot2;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::TouchButtonTrigger >  >  dot1;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  backBtn;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  deleteBtn;
    touchgfx::ButtonWithLabel confirmBtn;

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<CustomScreenViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<CustomScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // CUSTOMSCREENVIEWBASE_HPP
